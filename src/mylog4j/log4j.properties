#   语法为:log4j.rootLogger = [ level ] , appenderName, appenderName, …

#   level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
#   appenderName 为自定义,下面使用的要和它一致.

#    Log4j提供的appender有以下几种：
#　　org.apache.log4j.ConsoleAppender（控制台），表在控制台中打印出信息
#　　org.apache.log4j.FileAppender（文件），     表将日志写入文件
#　　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#　　org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#　　org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#    Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： %m 输出代码中指定的消息
#　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c 输出所属的类目，通常就是所在类的全名
#　　%t 输出产生该日志事件的线程名
#　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#　　[FrameWork] 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

#　　读取配置文件，其语法为：
#　　BasicConfigurator.configure ()： 自动快速地使用缺省Log4j环境。
#　　PropertyConfigurator.configure ( String configFilename) ：读取使用Java的特性文件编写的配置文件。
#　　DOMConfigurator.configure ( String filename ) ：读取XML形式的配置文件。

#    Log4j 5个正常的级别:DEBUG,INFO,WARN,ERROR,FATAL 还有两个可用的特别的日志记录级别: ALL,OFF
#    DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。
#    INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。
#    WARN level表明会出现潜在错误的情形。
#    FATAL level指出每个严重的错误事件将会导致应用程序的退出。
#    ALL Level是最低等级的，用于打开所有日志记录。
#    OFF Level是最高等级的，用于关闭所有日志记录。

# 必须先定义 rootLogger .
log4j.rootLogger=DEBUG,CONSOLE,RollFile,MAIL,DATABASE


################# Console Appender ########################################
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=DEBUG
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern= [%-5p]:%c - %d{yyyy-MM-dd HH:mm:ss} - %-4r [%t]: %m%n

################# File Appender ########################################
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.Threshold=OFF
log4j.appender.FILE.File=c:\log4j.log
# Append表是否附加或覆盖
log4j.appender.FILE.Append=true
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern= [%-5p]:%c - %d{yyyy-MM-dd HH:mm:ss} - %-4r [%t]: %m%n

################# RollingFileAppender ########################################
log4j.appender.RollFile=org.apache.log4j.RollingFileAppender
# Threshold 自定义日志级别
log4j.appender.RollFile.Threshold=ALL
log4j.appender.RollFile.File=c:\log4j.log
log4j.appender.RollFile.Append=true
log4j.appender.RollFile.MaxFileSize=1024KB
log4j.appender.RollFile.MaxBackupIndex=1
log4j.appender.RollFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollFile.layout.ConversionPattern= [%-5p]:%c - %d{yyyy-MM-dd HH:mm:ss} - %-4r [%t]: %m%n

################# SMTPAppender 需要放入Mail的类库########################################
log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
log4j.appender.MAIL.Threshold=ERROR
log4j.appender.MAIL.BufferSize=10
log4j.appender.MAIL.From=tengfei99@163.com
log4j.appender.MAIL.SMTPHost=smtp.163.com
log4j.appender.MAIL.SMTPUsername=tengfei99
log4j.appender.MAIL.SMTPPassword=java168..
log4j.appender.MAIL.SMTPDebug=false
#中文用native2asii 转换
log4j.appender.MAIL.Subject=Log4J\u63d0\u9192\u60a8\uff1a\u7cfb\u7edf\u53d1\u751f\u4e86\u4e25\u91cd\u9519\u8bef 
log4j.appender.MAIL.To=myqq188@qq.com
#自定义布局，继承HTMLLayout，解决乱码问题,HTMLLayout没有ConversionPattern
log4j.appender.MAIL.layout=mylog4j.DefineLayOut
#log4j.appender.MAIL.layout.ConversionPattern= [%-5p]:%c - %d{yyyy-MM-dd HH:mm:ss} - %-4r [%t]: %m%n

################# JDBC Appender 需要存在相应的JDBC的类库 ########################################
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.DATABASE.Threshold=ALL
log4j.appender.DATABASE.URL=jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=test.mdb
log4j.appender.DATABASE.driver=sun.jdbc.odbc.JdbcOdbcDriver
log4j.appender.DATABASE.user=struts
log4j.appender.DATABASE.password=struts
log4j.appender.DATABASE.sql=INSERT INTO log4j (sdate,sthread,slevel,scategory,smessage) VALUES ('%d{yyyy-MM-dd HH:mm:ss}','%t','%p','%c','%m')
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout
log4j.appender.DATABASE.layout.ConversionPattern= [%-5p]:%c - %d{yyyy-MM-dd HH:mm:ss} - %-4r [%t]: %m%n